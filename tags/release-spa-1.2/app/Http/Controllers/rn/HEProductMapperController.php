<?php

namespace App\Http\Controllers\rn;
use App\Http\Controllers\EmailController;

use Illuminate\Http\Request;

use App\Models\User;
use App\Models\Buyer;
use App\Models\BuyerAddress;
use App\Models\RoleUser;

use App\Http\Requests;
use App\Models\Product;
use App\Http\Controllers\Controller;
use App\Jobs\GetScannedProduct;
use DB;
use Log;
use Hash;
use Storage;
use JWTAuth;
use Validator;
use DNS1D;
use Exception;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use DateTime;
// use Storage;
use Carbon;
class HEProductMapperController extends Controller
{ 

    /**
     * @api {post} rn/app/product/map Add Mapping Record for the Product
     * @apiName AddProductMapping
     * @apiGroup Product
     *
     * @apiParam {Number} product_id Products unique ID.
     * @apiParam {String} barcode Barcode generated by the app.
     * @apiParam {String} type Barcode type.
     * @apiPermission Merchant Admin
     * @apiSuccess {String} status success.
     * @apiSuccess {String} long_message .
     * @apiFailure {String} status failure
     */

     public function map_product(Request $r, $id){

        $ret=array();
        $ret['status']="0";
        $ret['long_message']="Validation failure";
        $user = JWTAuth::parseToken()->authenticate();
        if ( !$user ) {
            return response()->json($ret);
        }
        $postContent = $r->getContent();
        $postAssoc = json_decode($postContent, true);
        $user_id=$user->id;
 

        $arr = [];

        $conn['connection_id'] = $id;
        array_push($arr, $conn);


        foreach ($postAssoc as $product) {


            $product_id = $product['product_id'];
            $barcode = $product['barcode'];
            $barcodeType = 'C128';
            $merchant_id = $product['merchant_id'];


            $ret['id']= $product['id'];
            $ret['product_id'] = $product_id;

            //verify if product exists
            $validator = DB::table('merchantproduct')->join('product','product.parent_id','=','merchantproduct.product_id')->join('merchant','merchant.id','=','merchantproduct.merchant_id')->join('users','users.id','=','merchant.user_id')->whereNull('users.deleted_at')->where('users.id','=',$user_id)->where('product.id','=',$product_id)->first();


            if (empty( $validator )) {
                $ret[ 'status' ] = 1;
                $ret[ 'long_message' ] = "Product does not exist";
            }
            else {
                //check if barcode already exists
                $productbc = DB::table( 'bc_management' )
                    ->where( 'bc_management.barcode' , $barcode )
                    ->first();

                //checking deleted map
                $deleted_product = DB::table( 'productbc' )
                    ->where('productbc.product_id', '=', $product_id )
                    ->leftJoin('bc_management', 'productbc.bc_management_id', '=', 'bc_management.id')
                    ->whereNotNull( 'bc_management.deleted_at' )
                    ->first();
    

                try {
                    if (empty( $productbc )) {
                        //map unmapped product
                        $file_name = str_random( 10 ) . ".png";
                        $path = "images/barcode/" . $product_id;
                        $file_path = public_path( $path );
                        $this->create_and_save_barcode( $file_path , $file_name , $product[ 'barcode' ] , $barcodeType );
                        $bc_management_id = DB::table( 'bc_management' )
                            ->insertGetId( [
                                "barcode" => $product[ 'barcode' ] ,
                                "barcode_type" => $barcodeType,
                                "image_path" => $file_name,
                                "created_at" => DB::raw('now()')

                            ] );
                        DB::table( 'productbc' )
                            ->insert( [
                                "bc_management_id" => $bc_management_id ,
                                "product_id" => $product_id
                            ] );
                        DB::table("session{$merchant_id}")
                            ->where('product_id', '=', $product_id)
                            ->update( [
                                "status" => 1
                            ] );
                        $ret[ 'status' ] = 1;
                        $ret[ 'long_message' ] = "Product's mapping has been completed.";
                    } else if ( !empty($deleted_product) ) {

                        //remap the deleted mapping
                        $file_name = str_random( 10 ) . ".png";
                        $path = "images/barcode/" . $product_id;
                        $file_path = public_path( $path );
                        $this->create_and_save_barcode( $file_path , $file_name , $product[ 'barcode' ] , $barcodeType );
                        $bc_management_id = DB::table( 'bc_management' ) 
                            ->leftJoin('productbc', 'productbc.bc_management_id', '=', 'bc_management.id')
                            ->where('productbc.product_id', '=', $product_id )
                            ->whereNotNull("bc_management.deleted_at")
                            ->update( [
                                "barcode" => $product[ 'barcode' ] ,
                                "barcode_type" => $barcodeType,
                                "image_path" => $file_name,
                                "bc_management.deleted_at"=> null,
                                "bc_management.updated_at" => DB::raw('now()')
                            ] );
                        DB::table("session{$merchant_id}")
                            ->where('product_id', '=', $product_id)
                            ->update( [
                                "status" => 1
                            ] );
                        
                        $ret[ 'status' ] = 1;
                        $ret[ 'long_message' ] = "Product's mapping has been updated.";
                    }
                    else {
                        DB::table("session{$merchant_id}")
                            ->where('product_id', '=', $product_id)
                            ->update( [
                                "status" => 1
                            ] );
                        $ret[ 'status' ] = 1;
                        $ret[ 'long_message' ] = "Product's has been already mapped.";
                    }

                } catch (\Exception $e) {
                    $ret[ 'short_message' ] = $e->getMessage();
                }
            }

            array_push($arr, $ret);
        }

        return response()->json($arr);

    }

     public function create_and_save_barcode($filepath,$filename,$data,$type="C128") {
        try {
            // return $filepath;
            $base64 = DNS1D::getBarcodePNG( $data , $type );
            $img = base64_decode( $base64 );
            if (!is_dir( $filepath )) {
                // dir doesn't exist, make it
                mkdir( $filepath , 0755 , true );
            }
            $filepath = $filepath . "/" . $filename;
            try {
                file_put_contents( $filepath , $img );
            } catch (\Exception $e) {

            }


        } catch (\Exception $e) {
            throw new Exception( "Error in creating barcode" . $e->getMessage() , 1 );

            return $e->getMessage();
        }
    }

    public function unmap_product(Request $r)
    {
        /*Validation*/
        $ret=array();
        $ret['status']="failure";
        $ret['long_message']="Validation failure";
        $user = JWTAuth::parseToken()->authenticate();


        if (!$r->has('pid') or !$user ) {
            $ret['debug']=$r->pid;
            return response()->json($ret);
        }

        $user_id=$user->id;
        $product_id=$r->pid;
        $company_id=$r->company_id;
        $productbc_id = $r->productbc_id;

		try {
			$owner_user_id=DB::table("company")->
				where('id',$company_id)->
				pluck("owner_user_id");
		} catch (\Exception $e) {
			Log::error($e->getFile().":".$e->getLine().", ".
				$e->getMessage());
			$owner_user_id=0;
		}

        $validator=DB::table('merchantproduct')->
			join('product','product.parent_id','=',
				'merchantproduct.product_id')->
			join('merchant','merchant.id','=','merchantproduct.merchant_id')->
			join('users','users.id','=','merchant.user_id')->
			whereNull('users.deleted_at')->
			where('users.id','=',$owner_user_id)->
			where('product.id','=',$product_id)->first();

		//Log::info(json_encode($validator));

        if (empty($validator)) {
            $ret['debug']="Validator empty(var)";
            return response()->json($ret);
        }

		//Log::info('Passed validator');

        try {
            /* Check if a record exists */
            $data=DB::table('productbc')->
				join('bc_management','bc_management.id','=',
					'productbc.bc_management_id')->
                where('productbc.product_id',$product_id)->
                select("productbc.id as pbid","bc_management.id as bcid",
					"bc_management.image_path","productbc.product_id")->
                first();

			if (!empty($data)) {
				DB::table("productbc")->where("id",$data->pbid)->delete();
				DB::table("bc_management")->where("id",$data->bcid)->delete();

				/* Delete the image file of barcode */   
				$image_path='barcode/'.$data->product_id.'/'.
					$data->image_path;

				Log::debug('image_path='.$image_path);
				Storage::disk('images')->delete($image_path);

				$ret['status']="success";
				$ret['long_message']="Product's mapping has been deleted.";

			} else {
				$ret['status']="error";
				$ret['long_message']="Product's mapping is NOT found! Please refresh your browser.";
			}
            
        } catch (\Exception $e) {
            $ret['short_message']=$e->getMessage();
			Log::error($e->getFile().":".$e->getLine().":".$e->getMessage());
        }
        return response()->json($ret);
    }



    /**
     * @api {post} rn/app/product/he Returns list of merchant products
     * @apiName HeProducts
     * @apiGroup Product
     *
     * @apiPermission Merchant Admin Staff
     * @apiSuccess {String} status success.
     * @apiSuccess {String} long_message .
     * @apiFailure {String} status failure
     */

    public function he_product(Request $r) {
        $ret=array();
        $ret['status']="failure";
        $ret['long_message']="Validation failure ";
        try{
            $user = JWTAuth::parseToken()->authenticate();
            //$pid_arrays=$r->pids;
            $company_id=$r->company_id;
            
        
            // if (is_null($pid_arrays)) {
            //     $pid_arrays=array();
            // }
            if (!$user ) {
                return response()->json($ret);
            }
            $user_id=$user->id;
            $owner_user_id=DB::table("company")->where('id',$company_id)->pluck("owner_user_id");
            $products=
             DB::table('merchantproduct')
            ->join('product','product.parent_id','=','merchantproduct.product_id')
            ->join('merchant','merchant.id','=','merchantproduct.merchant_id')
            ->join('users','users.id','=','merchant.user_id')
            ->leftJoin('productbc','productbc.product_id','=','product.id')
            ->whereNull('users.deleted_at')->where('users.id','=',$owner_user_id)
            ->whereNull('productbc.id')
            ->leftJoin('productqr','productqr.product_id','=','product.id')
            ->leftJoin('qr_management','productqr.qr_management_id','=','qr_management.id')
            
            ->leftJoin('nproductid','nproductid.product_id','=','product.id')

            ->select("product.id","product.name","product.thumb_photo","qr_management.image_path","nproductid.nproduct_id","merchantproduct.merchant_id")
            ->where("qr_management.type","qr")
            //->whereNotIn("product.id",$pid_arrays)
            ->where("product.status", "!=", "deleted")
            ->whereNull("product.deleted_at")
            ->get();
            
            foreach ($products as $product) {
                $ret['status']="success";
                $product->name=$product->name;;
                $product->image_uri=asset('images/product/'.$product->id.'/thumb/'.$product->thumb_photo);
                $product->qr_uri=asset('images/qr/product/'.$product->id.'/'.$product->image_path).".png";
                $product->pid=$product->id;
                $product->merchant_id = $product->merchant_id;
                $ret['product'.$product->id]=$product;
            }
            $ret['status']="success";
            $ret['long_message']="Unmapped products fetched";

        }catch(\Exception $e){
            $ret['long_message']=$e->getMessage();
            //$ret['pid']=$pid_arrays;
            $ret['l']=$e->getLine();
        }
        return response(json_encode($ret,JSON_UNESCAPED_SLASHES));
        // return response()->json($ret);

    }

    public function mapped_product(Request $r) {
        $ret=array();
        $ret['status']="failure";
        $ret['long_message']="Validation failure ";
        try{
            $user = JWTAuth::parseToken()->authenticate();
            //$pid_arrays=$r->pids;
            $company_id=$r->company_id;
            
        
            // if (is_null($pid_arrays)) {
            //     $pid_arrays=array();
            // }
            if (!$user ) {
                return response()->json($ret);
            }
            $user_id=$user->id;
            $owner_user_id=DB::table("company")->where('id',$company_id)->pluck("owner_user_id");
            $products=
             DB::table('merchantproduct')
            ->join('product','product.parent_id','=','merchantproduct.product_id')
            ->where("product.status", "!=", "deleted")
            ->whereNull("product.deleted_at")
            ->join('merchant','merchant.id','=','merchantproduct.merchant_id')
            ->join('users','users.id','=','merchant.user_id')
            ->leftJoin('productbc','productbc.product_id','=','product.id')
            ->leftJoin('bc_management','bc_management.id','=','productbc.bc_management_id')
            ->whereNull("bc_management.deleted_at")
            ->whereNull('users.deleted_at')
            ->where('users.id','=',$owner_user_id)
            ->whereNotNull('productbc.id')
            ->leftJoin('productqr','productqr.product_id','=','product.id')
            ->leftJoin('qr_management','productqr.qr_management_id','=','qr_management.id')
            ->where("qr_management.type","qr")
            ->leftJoin('nproductid','nproductid.product_id','=','product.id')
            //->whereNotIn("product.id",$pid_arrays)
            ->select("product.id","product.name","product.thumb_photo","qr_management.image_path","nproductid.nproduct_id","merchantproduct.merchant_id", "bc_management.barcode", "productbc.bc_management_id")
            ->paginate(20);
            
            foreach ($products as $product) {
                $ret['status']="success";
                $product->name=$product->name;
                $product->image_uri=asset('images/product/'.$product->id.'/thumb/'.$product->thumb_photo);
                $product->qr_uri=asset('images/qr/product/'.$product->id.'/'.$product->image_path).".png";
                $product->pid=$product->id;
                $product->merchant_id = $product->merchant_id;
                $product->barcode = $product->barcode;
                $product->bc_management_id = $product->bc_management_id;
                $ret['product'.$product->id]=$product;
            }
            $ret['status']="success";
            $ret['long_message']="Mapped products fetched";

        }catch(\Exception $e){
            $ret['long_message']=$e->getMessage();
            //$ret['pid']=$pid_arrays;
            $ret['l']=$e->getLine();
        }
        return response(json_encode($ret,JSON_UNESCAPED_SLASHES));
        // return response()->json($ret);

    }

    public function get_barcode(Request $r) {
        $ret=array();
        $ret['status']="failure";
        $ret['long_message']="Validation failure ";
        try{
            $user = JWTAuth::parseToken()->authenticate();
            $product_id = $r->product_id;
            
            if (!$user ) {
                return response()->json($ret);
            }
            $user_id=$user->id;
            $product_barcode=DB::table('productbc')
                ->leftJoin('bc_management','bc_management.id','=','productbc.bc_management_id')
                ->where('productbc.product_id', '=', $product_id)
                ->select("bc_management.barcode")
                ->first();
            
            $ret['barcode'] = $product_barcode->barcode;
            $ret['status']="success";
            $ret['long_message']="Barcode fetched";

        }catch(\Exception $e){
            $ret['long_message']=$e->getMessage();
            //$ret['pid']=$pid_arrays;
            $ret['l']=$e->getLine();
        }
        return response(json_encode($ret,JSON_UNESCAPED_SLASHES));
        // return response()->json($ret);
    }

    public function unsent (Request $r) {
        $ret=array();
        $ret['status']="failure";
        $ret['long_message']="Cannot Create Database";
        try{
            $scanned_product = json_decode($r->getContent(), true);
            $product_id = $scanned_product['product_id'];
            $merchant_id = $scanned_product['merchant_id'];
            $barcode = $scanned_product['barcode'];
            $user = JWTAuth::parseToken()->authenticate();
    
            if (!$user ) {
                return response()->json($ret);
            }
            $user_id=$user->id;
            $conn = Schema::connection("mysql2"); 
            if ($conn->hasTable("session{$merchant_id}") ) {
                $get_added_on = DB::table("session{$merchant_id}")
                    ->select('added_on')
                    ->first(); 
                $added_on = ( $get_added_on ?
					DateTime::createFromFormat('Y-m-d H:i:s',
					$get_added_on->added_on)->getTimestamp() : time());
            }
           
            if ($conn->hasTable("session{$merchant_id}") &&
				$added_on <= (time()- 43200)) {

                $ret['status']=$this->table_op('delete',
					"session{$merchant_id}");
                $ret['status']=$this->table_op('create',
					"session{$merchant_id}");
                $ret['status']=$this->table_op('add',
					"session{$merchant_id}",
						[$product_id, $merchant_id, $barcode]);
                $ret['long_message']="Dropped the old, created new database and added data";

            } else if ($conn->hasTable("session{$merchant_id}") &&
					   $added_on > (time()- 43200)) {
                $ret['status']=$this->table_op('add', "session{$merchant_id}",
					[$product_id, $merchant_id, $barcode]);
                $ret['long_message']="Added data to the database";

            } else {
                $ret['status']=$this->table_op('create',
					"session{$merchant_id}");
                $ret['status']=$this->table_op('add', "session{$merchant_id}",
					[$product_id, $merchant_id, $barcode]); 
                $ret['long_message']="Created new database and added data";
            }
            
            $unsent = DB::table("session{$merchant_id}")
                    ->select('added_on')
                    ->where('status', '=', 0)
                    ->get();
            $ret['unsent'] = count($unsent);

        }catch(\Exception $e){
            $ret['long_message']=$e->getMessage();
            $ret['l']=$e->getLine();
        }
        return response(json_encode($ret,JSON_UNESCAPED_SLASHES));
    }

    private function table_op ($op, $db_name, $arr =null) {
        
        $conn = Schema::connection("mysql2");
        if ($op === 'delete') {
            $conn->drop("{$db_name}");
            return 'Success';

        } elseif ($op === 'create') {
            $conn->create("{$db_name}", function (Blueprint $table) {
                $table->increments('id');
                $table->string('product_id');
                $table->string('merchant_id');
                $table->string('barcode');
                $table->boolean('status')->default(0); 
                $table->timestamp('added_on');
             });
             return 'Success';
        }
        elseif ($op === 'add') {
            DB::table("{$db_name}")->insert([
                'product_id' => $arr[0],
                'merchant_id' => $arr[1],
                'barcode' => $arr[2], 
                'added_on' => DB::raw('now()')
            ]);
            return 'Success';
        }
    }

    public function count_unsent (Request $r) {
        $ret=array();
        $ret['status']= 'failure';
        $ret['long_message'] = 'Authentication failed';
        try{
            $scanned_product = json_decode($r->getContent(), true);
            $merchant_id = $scanned_product['merchant_id'];
            $user = JWTAuth::parseToken()->authenticate();
    
            if (!$user ) {
                return response()->json($ret);
            }            

            $user_id=$user->id;

            $conn = Schema::connection("mysql2"); 
            if ($conn->hasTable("session{$merchant_id}") ) {
                $unsent = DB::table("session{$merchant_id}")
                    ->select('added_on')
                    ->where('status', '=', 0)
                    ->get();
                
                if (count($unsent) <= 0 ) {
                    $ret['status']=$this->table_op('delete',
						"session{$merchant_id}");
                    $ret['long_message'] = 'Temporary Database deleted';
                    $ret['count'] = count($unsent);
                    $ret['status']= 'success';
                } else {
                    $ret['count'] = count($unsent);
                    $ret['status']= 'success';
                    $ret['long_message'] = 'Unsent product counted';
                }
                
            } else {
                $ret['count'] = 0;
                $ret['status']= 'success';
                $ret['long_message'] = 'Unsent product counted';
            } 
        } catch(\Exception $e){
            $ret['long_message']=$e->getMessage();
            $ret['l']=$e->getLine();
        }
        return response(json_encode($ret,JSON_UNESCAPED_SLASHES));

    }

    public function get_salesmemo_date (Request $r) {
        $ret=array();
        $ret['status']= 'failure';
        $ret['long_message'] = 'Error fetching data';
        $count = 0;
        try{
            $request = json_decode($r->getContent(), true);
            $location = $request['location'];
            $user = JWTAuth::parseToken()->authenticate();
    
            if (!$user || !$location  ) {
                return response()->json($ret);
            }            

            $user_id=$user->id;

            $dates =DB::table('salesmemo')
                ->where('creator_user_id', '=', $user_id)
                ->where('fairlocation_id', '=', $location)
                ->select('created_at')
                ->get();

            if (!empty($dates)) {
                foreach ($dates as $date) {
                    $count++;
                    $raw_date = DateTime::createFromFormat('Y-m-d H:i:s',
						$date->created_at );
                    $date->year = $raw_date->format("Y");
                    $date->month = $raw_date->format("m");  
                    $ret["created_at{$count}"] = $date;               
                }
            }

            $ret['status']= 'success';
            $ret['long_message'] = 'Successfully fetched'; 

        } catch (\Exception $e){
            $ret['long_message']=$e->getMessage();
            $ret['l']=$e->getLine();
        }

        $dt = Carbon::now();
        $raw_date= $dt->toDateString();
        $date=(object)array();
        // $raw_date = DateTime::createFromFormat('Y-m-d H:i:s',$now);
        $date->year = $dt->year;
        $date->month = $dt->month;  
        $ret["created_at".($count+1)] = $date;
        // return $date;
        return response(json_encode($ret,JSON_UNESCAPED_SLASHES));

    }

    public function get_report_date (Request $r) {
        $ret=array();
        $ret['status']= 'failure';
        $ret['long_message'] = 'Error fetching data';
        try{
            $request = json_decode($r->getContent(), true);
            $location = $request['location'];
            $user = JWTAuth::parseToken()->authenticate();
    
            if (!$user || !$location ) {
                return response()->json($ret);
            }            

            $user_id=$user->id;

            $dates =DB::table('stockreport')
                ->where('creator_user_id', '=', $user_id)
                ->where('creator_location_id', '=', $location)
                ->select('created_at')
                ->get();
           
            $count = 0;
            if (!empty($dates)){
                
                foreach ($dates as $date) {
                $count++;
                $raw_date = DateTime::createFromFormat('Y-m-d H:i:s',
					$date->created_at );
                $date->year = $raw_date->format("Y");
                $date->month = $raw_date->format("m");  
                    $ret["created_at{$count}"] = $date;               
                }
            }
            
			$dt = Carbon::now();
			$raw_date= $dt->toDateString();
			$date=(object)array();
			// $raw_date = DateTime::createFromFormat('Y-m-d H:i:s',$now);
			$date->year = $dt->year;
			$date->month = $dt->month;  
			$ret["created_at".($count+1)] = $date;
			$ret['status']= 'success';
			$ret['long_message'] = 'Successfully fetched';

        } catch (\Exception $e){
            $ret['long_message']=$e->getMessage();
            $ret['l']=$e->getLine();
        }
        return response(json_encode($ret,JSON_UNESCAPED_SLASHES));
    }

    public function search_unmapped_product(Request $r) {
        $ret=array();
        $ret['status']="failure";
        $ret['long_message']="Validation failure ";
        try{
            $user = JWTAuth::parseToken()->authenticate();
            //$pid_arrays=$r->pids;
            $company_id=$r->company_id;
            $term= $r->term;
            $page= $r->page;
            $limit = 20;
            $offset = $limit * ($page - 1);
			Log::debug("page=".$page.", limit=".$limit.", offset=".$offset);
            
            if (!$user ) {
                return response()->json($ret);
            }
            $user_id=$user->id;
            $owner_user_id=DB::table("company")->
				where('id',$company_id)->pluck("owner_user_id");

            $merchant_id=DB::table("merchant")->
				where('user_id',$owner_user_id)->pluck("id");

            $products=DB::select(DB::raw("
                select
                    p.id,
                    p.name,
                    p.thumb_photo,
                    qr_management.image_path,
                    nproductid.nproduct_id
                from
                    merchantproduct mp,
                    merchant m,
                    product p
                left outer join 
                    productbc on p.id=productbc.product_id
                left outer join 
                    productqr on p.id=productqr.product_id
                left outer join 
                    qr_management on productqr.qr_management_id=qr_management.id
                left outer join 
                    nproductid on p.id=nproductid.product_id
                where
                    merchant_id='{$merchant_id}' and
                    mp.merchant_id=m.id and
                    mp.product_id=p.id and (
                        (productbc.product_id is not null and
                            productbc.deleted_at is not null) or
                        (productbc.product_id is null and
                            productbc.deleted_at is null)
                    ) and
					p.status != 'transferred' and
					p.status != 'deleted' and 
					p.status != '' and
					p.deleted_at is null and 
                    p.name LIKE '%{$term}%'
				group by p.id
                limit {$limit} offset {$offset}
            "));

            Log::debug('*** Unmapped products size='.
                count($products)." ***");
            //Log::debug($products);

            
            foreach ($products as $product) {
                $ret['status']="success";
                $product->name=$product->name;
                $product->image_uri=asset('images/product/'.
                    $product->id.'/thumb/'.$product->thumb_photo);
                $product->pid=$product->id;
                $product->qr_uri=asset('images/qr/product/'.
					$product->id.'/'.$product->image_path).".png";
                $product->nproduct_id = $product->nproduct_id;
                $ret['product'.$product->id]=$product;
            }

            $ret['status']="success";
            $ret['long_message']="Unmapped products fetched";

        } catch (\Exception $e){
            $ret['long_message']=$e->getMessage();
            //$ret['pid']=$pid_arrays;
            $ret['l']=$e->getLine();
        }
        return response(json_encode($ret,JSON_UNESCAPED_SLASHES));
    }

    public function search_mapped_product(Request $r) {
        $ret=array();
        $ret['status']="failure";
        $ret['long_message']="Validation failure ";
        try{
            $user = JWTAuth::parseToken()->authenticate();
            //$pid_arrays=$r->pids;
            $company_id=$r->company_id;
            $term = $r->term;
            $page= $r->page;
            $limit = 50;
            $offset = $limit * ($page - 1);
            $location_id=$r->location_id;
            
            if (!$user ) {
                return response()->json($ret);
            }
            $user_id=$user->id;
            $owner_user_id=DB::table("company")->
				where('id',$company_id)->pluck("owner_user_id");

            $merchant_id=DB::table("merchant")->
				where('user_id',$owner_user_id)->pluck("id");
            $query="
                select
                    p.id,
                    p.name,
                    p.thumb_photo,
                    qr_management.image_path,
                    nproductid.nproduct_id,
                    productbc.id productbc_id
                from
                    merchantproduct mp,
             
                    productbc pbc1,
                    product p
                right outer join
                    productbc on p.id=productbc.product_id
                left join 
                    productqr on p.id=productqr.product_id
                left join 
                    qr_management on productqr.qr_management_id=qr_management.id
                right outer join 
                    nproductid on p.id=nproductid.product_id
                where
                    mp.merchant_id=$merchant_id and
                    mp.product_id=p.id and
                    pbc1.product_id=p.id and
                    pbc1.id=productbc.id and
                    productbc.deleted_at is null and
                    qr_management.type= 'qr' and 
                    p.status != 'transferred' and
                    p.status != 'deleted' and 
                    p.status != '' and
                    p.deleted_at is null 
                
            ";
            if (!empty($term) && $term !="" && $term!=" ") {
                $query.="and 
                    p.name LIKE '%{$term}%'";
            }
            $query.="group by p.id
                limit {$limit}";
            Log::debug("QUERY ");
            Log::debug($query);
            $products=DB::select(DB::raw($query));

            Log::debug('*** Mapped products size='.
                count($products)." ***");
            Log::debug('*** offset='.$offset.', limit='.$limit.' ***');


            foreach ($products as $product) {
                $product->name=$product->name;
                $product->image_uri=asset('images/product/'.
                    $product->id.'/thumb/'.$product->thumb_photo);
                $product->pid=$product->id;
                $product->qr_uri=asset('images/qr/product/'.$product->id.'/'.$product->image_path).".png";
                $product->nproduct_id = $product->nproduct_id;
                $product->productbc_id = $product->productbc_id;
                $quantity=DB::table("locationproduct")
                ->where("location_id",$location_id)
                ->whereNull("deleted_at")
                ->where("product_id",$product->id)
                ->orderBy("created_at","DESC")
                ->pluck("quantity");
                if (empty($quantity)) {
                    # code...
                    $quantity=0;
                }
                $product->quantity=$quantity;
                $ret['product'.$product->id]=$product;
            }
            $ret['status']="success";
            $ret['long_message']="Mapped products fetched";
            
        } catch (\Exception $e){
            $ret['long_message']=$e->getMessage();
            $ret['l']=$e->getLine();
        }
        return response(json_encode($ret,JSON_UNESCAPED_SLASHES));
    }

    public function register(Request $r){ 
    
        if (!isset($r)) {
        return response()->json(["status"=>"failure","message"=>"Empty forms are not accepted"]);
        }
        $validator = Validator::make($r->all(),[
            'email' => 'required|unique:users|max:100|min:7',
            'password' => 'required|max:100|min:7|confirmed',
            'password_confirmation' => 'required',
        
        ]);
        if($validator->fails()){
            return $validator->errors();
        }
        else{
            $user = new User;
            $user->email = $r->email;
            $user->name = $r->name;
            $user->password = Hash::make($r->password);
            $user->nric = "";
            $user->save();
            $user_id = $user->id;
            
            $buyer_profile = new Buyer;
            $buyer_profile->user_id = $user_id;
            $buyer_profile->save();
            $buyer_profile_reference_id = $buyer_profile->id;
            
            $bad = new BuyerAddress;
            $bad->buyer_id = $buyer_profile_reference_id;
            $bad->save();
            
            $role = new RoleUser;
            $role->user_id = $user_id;
            $role->role_id = 2;
            $role->save();
            
            $e= new EmailController;
            $e->confirmEmail($r->email,2);

            return response()->json(['status'=>"success",'message'=>'user registered']);
        }
    }

    public function forgot_password(Request $r){
        $email = $r->get('email');
        $ret = array();
		try{	
            $user=DB::table('users')->where('email',$email)->first();
            if (!empty($user)) {
                DB::table('stuff')->insert(['note'=>'forgot_password|Email|'.$email]);
                $e= new EmailController;
                $e->passwordReset($email);
                DB::table('stuff')->insert(['note'=>'password_reset|No Exception Occured']);
                $ret['status']= "success";
                $ret['long_message']= "A mail has been sent to the provided email, check your mail for further instructions";
            }
            else{
                $ret['status']= "failure";
                $ret['long_message']= "Email does not exist, you are not a member";
                DB::table('stuff')->insert(['note'=>'forgot_password|Exception Occured|'.$ret['long_message']]);
            }			
		} catch (\Exception $e) {
            DB::table('stuff')->insert(['note'=>'forgot_password|Exception Occured|'.$e->getMessage()]);
			return $e;
        }	
        
        return response(json_encode($ret,JSON_UNESCAPED_SLASHES));
    }
    
    public function authenticate(Request $request)
    {

        $credentials = $request->only('email', 'password');

        try {
            // attempt to verify the credentials and create a token for the user
            if (! $token = JWTAuth::attempt($credentials)) {
                return response()->json(['error' => 'Invalid credentials, please check and try again.'], 401);
            }
        } catch (JWTException $e) {
            // something went wrong whilst attempting to encode the token
            return response()->json(['error' => 'An error occured, please try again'], 500);
        }
        $user=User::where('email',$request->email)->first();
        $company=DB::table('company')->where('owner_user_id',$user->id)
            ->first();
        $buyer=DB::table('buyer')
            ->where('user_id',$user->id)
            ->where('status', "=", 'active')
            ->first();
        if (!empty($buyer)) {
            return response()->json(compact('token','user','company'));
        }
        else {
            return response()->json(['error' => 'User not confirmed, please check your email to confirm your account']);
        }
        
    }
}
