<?php

namespace App\Http\Controllers\rn;

use Illuminate\Http\Request;

use App\Http\Requests;
use App\Http\Controllers\Controller;
use App\Http\Controllers\UtilityController;
use DB;
use Log;
use JWTAuth;
use DNS1D;
use Exception;
use Carbon;
use Storage;
class ProductMapperController extends Controller
{
    /**
     * @api {post} rn/app/map/product Add Mapping Record for the Product
     * @apiName AddProductMapping
     * @apiGroup Product
     *
     * @apiParam {Number} product_id Products unique ID.
     * @apiParam {String} barcode Barcode generated by the app.
     * @apiParam {String} type Barcode type.
     * @apiPermission Merchant Admin
     * @apiSuccess {String} status success.
     * @apiSuccess {String} long_message .
     * @apiFailure {String} status failure
     */
   
    public function map_product(Request $r)
    {
        /*Validation*/
        $ret=array();
        $ret['status']="failure";
        $ret['long_message']="Validation failure";
        $user = JWTAuth::parseToken()->authenticate();

        if (!$r->has('pid') or !$user ) {
            $ret['debug']=$r->pid;
            return response()->json($ret);
        }

        $user_id=$user->id;
        $product_id=$r->pid;
        $barcode=$r->barcode;
        $barcode_type=$r->barcode_type;
		$company_id=$r->company_id;

		try {
			$owner_user_id=DB::table("company")->
				where('id',$company_id)->
				pluck("owner_user_id");
		} catch (\Exception $e) {
			Log::error($e->getFile().":".$e->getLine().", ".
				$e->getMessage());
			$owner_user_id=0;
		}

        /*
		Log::info('user_id      ='.$user_id);
		Log::info('product_id   ='.$product_id);
		Log::info('barcode      ='.$barcode);
		Log::info('barcode_type ='.$barcode_type);
		Log::info('company_id   ='.$company_id);
		Log::info('owner_user_id='.$owner_user_id);
		*/

        $validator=DB::table('merchantproduct')->
			join('product','product.id','=',
				'merchantproduct.product_id')->
			join('merchant','merchant.id','=','merchantproduct.merchant_id')->
			join('users','users.id','=','merchant.user_id')->
			whereNull('users.deleted_at')->
			where('users.id','=',$owner_user_id)->
			where('product.id','=',$product_id)->first();

		// Log::info(json_encode($validator));

        if (empty($validator)) {
            $ret['debug']="Validator empty(var)";
            return response()->json($ret);
        }

		// Log::info('Passed validator');

        try {
            
            /*  Check if a record with barcode exists*/
            $productbc=DB::table('productbc')->
                join('bc_management','bc_management.id','=',
                    'productbc.bc_management_id')->
                join("merchantproduct","merchantproduct.product_id","=",
                    "productbc.product_id"
                    )->
                join("merchant","merchant.id","=","merchantproduct.merchant_id")->
                join("users","users.id","=","merchant.user_id")->
                where("users.id",$owner_user_id)->
                where('bc_management.barcode',$r->barcode)->
                whereNull('productbc.deleted_at')->
                orderBy("productbc.created_at")->
                first();
            // Log::info($productbc);exit();
            if (!empty($productbc)) {
                $product=DB::table("product")->
                where("id",$productbc->product_id)->
                
                select("product.id","product.photo_1","product.name")->
                first();

                    $product->image_uri='https://opensupermall.com/images/product/'.$product->id.'/'.$product->photo_1;
           
                $ret["error"]="Barcode already mapped. To remap, please remove the mapping.";
                $ret["product"]=$product;
                return response()->json($ret,505);
            }
            /*Check if a record exists with product_id exists
            $productbc=DB::table('productbc')->
				join('bc_management','bc_management.id','=',
					'productbc.bc_management_id')->
				where('productbc.product_id',$product_id)->
				whereNull('productbc.deleted_at')->
 
				first();

            if (!empty($productbc)) {
                $product=DB::table("product")->where("id",$productbc->product_id)->
                select("product.id","product.photo_1","product.name")->
                first();

                    $product->image_uri=asset('images/product/'.$product->id.'/'.$product->photo_1);
               
                $ret["error"]="This product has been mapped. Delete current mapped code for remapping purpose.";
                $ret["product"]=$product;
                return response()->json($ret,505);
            }
            */
                    
                $file_name=str_random(10).".png";
                $path="images/barcode/".$product_id;
                $file_path=public_path($path);
                $this->create_and_save_barcode(
                    $file_path,$file_name,$r->barcode,$r->barcode_type);
                $bc_management_id=DB::table('bc_management')->
                    insertGetId([
                        "barcode"=>$r->barcode,
                        "barcode_type"=>$r->barcode_type,
                        "image_path"=>$file_name,
                        "updated_at"=>Carbon::now(),
                        "created_at"=>Carbon::now()
                    ]);

                DB::table('productbc')
                ->insert([
                    "bc_management_id"=>$bc_management_id,
                    "product_id"=>$product_id,
                    "updated_at"=>Carbon::now(),
                    "created_at"=>Carbon::now()
                    ]);
                $ret['status']="success";
                $ret['long_message']="Product's mapping has been completed.";
            

            
        } catch (\Exception $e) {
            Log::info($e);
            $ret['short_message']=$e->getMessage();
        }
        return response()->json($ret);
    }

    public function create_and_save_barcode($filepath,$filename,
		$data,$rawtype="C128") {

		/* Intelligence to map raw barcode type to Milon's barcode library:
		   https://github.com/milon/barcode/blob/master/readme.md */
		switch($rawtype) {
			case (preg_match('/CODE_*/', $rawtype) ? true : false):
				$type = str_replace('CODE_','C',$rawtype);
				break;
			default:
				$type = str_replace('_','',$rawtype);
		}

		Log::info('rawtype='.$rawtype.', type='.$type);

        try {
            // return $filepath;
			//Log::info('BEFORE DNS1D:getBarcodePNG()');
			try  {
				$base64 = DNS1D::getBarcodePNG($data,$type);
			} catch (\Exception $e) { 
				Log::error('Error! DNS1D::getBarcodePNG("'.
					$data.'","'.$type.'"):'.
					$e->getFile().':'.$e->getLine().': '.$e->getMessage());
			}

            $img = base64_decode($base64);
            if (!is_dir($filepath)) {
              // dir doesn't exist, make it
              mkdir($filepath,0775, true);
            }
            $filepath=$filepath."/".$filename;
			Log::info('filepath='.$filepath);
            try {
                file_put_contents($filepath, $img);
            } catch (\Exception $e) {
				Log::error("Error! file_put_content():".$e->getFile().':'.
					$e->getLine().': '.$e->getMessage());
            }


        } catch (\Exception $e) {
            throw new Exception("Error in creating barcode".
				$e->getMessage(), 1);
            
            return $e->getMessage();
        }
    }

    /**
     * @api {post} rn/app/product/unmapped Returns list of  unmapped products
     * @apiName UnmappedProducts
     * @apiGroup Product
     *
     * @apiPermission Merchant Admin Staff
     * @apiSuccess {String} status success.
     * @apiSuccess {String} long_message .
     * @apiFailure {String} status failure
     */

    public function unmapped_product(Request $r)
    {
        $ret=array();
        $ret['status']="failure";
        // $ret['long_message']="Validation failure ";
        $ret['company_id']=$r->company_id;
        try{
            $user = JWTAuth::parseToken()->authenticate();
            $pid_arrays=$r->pids;
            $company_id=$r->company_id;

			Log::debug('user->name='.$user->name);
			Log::debug('company_id='.$company_id);
			Log::debug(json_encode($pid_arrays));
            
            if (is_null($pid_arrays)) {
                $pid_arrays=array();
            }
            if (!$user ) {
                return response()->json($ret);
            }
            $user_id=$user->id;
            $owner_user_id=DB::table("company")->
				where('id',$company_id)->pluck("owner_user_id");

			$merchant_id=DB::table("merchant")->
				where('user_id',$owner_user_id)->pluck("id");


            $product=
             DB::table('merchantproduct')
            ->join('product','product.id','=','merchantproduct.product_id')
            ->join('merchant','merchant.id','=','merchantproduct.merchant_id')
            ->join('users','users.id','=','merchant.user_id')
            ->leftJoin('productbc','productbc.product_id','=','product.id')
            ->leftJoin('productqr','productqr.product_id','=','product.id')
            ->leftJoin('qr_management','productqr.qr_management_id','=','qr_management.id')
            ->leftJoin('nproductid','nproductid.product_id','=','product.id')
            ->where('users.id','=',$owner_user_id)
            ->whereNull("product.deleted_at")
            ->whereNull('users.deleted_at')
            // ->where("product.id",2843)
            ->whereNotIn("product.id",$pid_arrays)
            ->where("product.status","!=","transferred")
            ->where("product.status","!=","deleted")
            ->where("product.status","!=","")
           
            ->select("product.id","product.name","product.thumb_photo",
				"qr_management.image_path","nproductid.nproduct_id")
            ->orderBy("productbc.deleted_at")
            ->first();

			Log::debug(json_encode($product));


           $ret['status']="success";
           $prc=new ProductController;
            $product->name=$prc->name($product->name);
            $product->image_uri=asset('images/product/'.$product->id.
			'/thumb/'.$product->thumb_photo);
            $product->qr_uri=asset('images/qr/product/'.$product->id.
			'/'.$product->image_path).".png";
           $ret['product']=$product;


        }catch(\Exception $e){
            $ret['long_message']=$e->getMessage();
            $ret['pid']=$pid_arrays;
            $ret['l']=$e->getLine();
        }
        return response(json_encode($ret,JSON_UNESCAPED_SLASHES));
        // return response()->json($ret);
    }

     public function unmap_product(Request $r)
    {
        /*Validation*/
        $ret=array();
        $ret['status']="failure";
        $ret['long_message']="Validation 1 failure";

        
        if (!$r->has('pid')) {
            # code...
            $ret['long_message']='Bad Request Error';
            return response()->json($ret);
        }

        $user = JWTAuth::parseToken()->authenticate();
        $product_id=$r->pid;
       /*
        $validator=DB::table('merchantproduct')->
            join('product','product.id','=','merchantproduct.product_id')->
            join('merchant','merchant.id','=','merchantproduct.merchant_id')->
            join('users','users.id','=','merchant.user_id')->
            whereNull('users.deleted_at')->
            where('users.id','=',$user_id)->
            where('product.id','=',$product_id)->
            first();

        if (empty($validator)) {
            $ret['long_message']="Validation 2 failure";
            return response()->json($ret);
        }
        */
        try {
           

            /**/
            $merchant_id=UtilityController::productMerchantId($product_id);

            $data=DB::table("bc_management")->
            join("productbc","productbc.bc_management_id","=","bc_management.id")->
            join("merchantproduct","merchantproduct.product_id","=","productbc.product_id")->
            join("product","merchantproduct.product_id","=","product.id")->

            where("productbc.product_id",$product_id)->
            where("merchantproduct.merchant_id",$merchant_id)->
            whereNull("merchantproduct.deleted_at")->
            whereNull("productbc.deleted_at")->
            whereNull("product.deleted_at")->
            whereNull("bc_management.deleted_at")->
            orderBy("productbc.created_at","DESC")->
            select("productbc.product_id","productbc.id as pbid","bc_management.id as bcid","bc_management.image_path")->
            first(); 

            if (!empty($data)) {

                DB::table("productbc")->where("id",$data->pbid)->delete();
                
                DB::table("bc_management")->where("id",$data->bcid)->delete();

                /* Delete the image file of barcode */   
                $image_path='barcode/'.$data->product_id.'/'.
                    $data->image_path;

                Log::debug('image_path='.$image_path);
                try {
                     Storage::disk('images')->delete($image_path);
                } catch (\Exception $e) {
                    Log::error('Error @ '.$e->getLine().' file '.$e->getFile().' '.$e->getMessage());
                }
               

                $ret['status']="success";
                $ret['long_message']="Product's mapping has been deleted.";

            } else {
                $ret['status']="error";
                $ret['long_message']="Product's mapping is NOT found! Please refresh your browser.";
            }

        } catch (\Exception $e) {
            $ret['short_message']=$e->getMessage();
            Log::error($e->getFile().":".$e->getLine().":".$e->getMessage());
        }
        return response()->json($ret);
    }
}
